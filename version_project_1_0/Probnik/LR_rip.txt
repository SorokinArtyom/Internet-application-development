App.js

import { BrowserRouter, Route, Routes, Link } from "react-router-dom";
import React, {useEffect, useState, useReducer} from 'react';
import {Card, Col, Row, Button, Spinner} from "react-bootstrap";
import './App.css';
// import axios from 'axios';
import InputField from "./InputField";

function App() {

    return;
        // <BrowserRouter basename="/">
        //     <div>
        //         <ul>
        //             <li>
        //                 <Link to="/">Старт</Link>
        //             </li>
        //             <li>
        //                 <Link to="/new">Хочу на страницу с чем-то новеньким</Link>
        //             </li>
        //         </ul>
        //         <hr />
        //         <Routes>
        //             <Route path="/" element={<h1>Это наша стартовая страница</h1>} />
        //             <Route path="/new" element={<h1>Это наша страница с чем-то новеньким</h1>} />
        //         </Routes>
        //     </div>
        // </BrowserRouter>
}

function init(state){
    console.log(state);
    return state
}

function reducer(state, action){
    switch(action.type){
        case 'transfer':
            return {
                ...state,
                transfer: action.payload
            }
        case 'load':
            return {
                ...state,
                loading: action.loading
            }
        case 'search_transfer':
            return {
                ...state,
                searchValue:action.payload
            }
        // case 'load_back':
        //     return {
        //         ...state,
        //         loading: !state.loading
        //     }
        case 'reset':
            return init(action.payload)
        default:
            return state;
    }
}


const arr = [
    'Эндрю Робертсон',
    'Рахим Стерлинг',
    'Эдерсон Мораес',
    'Маркус Рэшфорд',
    'Алекс Ивоби',
    'Майкл Антонио',
    'Карим Бензема',
    'Ансу Фати',
    'Пауло Дибала',
    'Тео Эрнандез',
    'Марко Ройс',
]

// const [data, dispatch] = useReducer(reducer,{ searchValue: 'Криштиану Роналду', loading: false, transfer: [] }, init)

const DEFAULT_SEARCH_FOOTBALLER = 'Криштиану Роналду';

const getTransferByID = async (name = DEFAULT_SEARCH_FOOTBALLER) =>{

    // const res = axios.get(`http://127.0.0.1:8000/find/?format=json&search=${name}`)

    const res = await fetch(`http://127.0.0.1:8000/find/?&search=${name}`)
        .then((response) => {
            return response.json();
        }).catch(()=>{
            return {resultCount:0, results:[]}
        })
    return res
}


function TransfersPage() {

    // const [searchValue, setSearchValue] = useState('Криштиану Роналду');
    //
    // const [loading, setLoading] = useState(false)
    //
    // const [transfer, setTransfer] = useState([])

    const setSearchValue = (setValue) => {
        // dispatch({setValue})
        dispatch({type: "search_transfer", payload: setValue})
        console.log(setValue)
    }

    const [data, dispatch] = useReducer(reducer,{ searchValue: 'Криштиану Роналду', loading: false, transfer: [] }, init)

    const handleSearch = async () =>{
        // await setLoading(true);
        dispatch({type: "load", payload: true})
        const results = await getTransferByID(data.searchValue);
        console.log(await getTransferByID(data.searchValue));
        // console.log(results);
        // await setTransfer(results);
        dispatch({type: "transfer", payload: results})
        // await setLoading(false)
        dispatch({type: "load", payload: false})
    }

    return (
        // <Button disabled={loading} onClick={handleSearch}>Искать</Button>
        <div className={`container ${data.loading && 'containerLoading'}`}>
            {data.loading && <div className="loadingBg"><Spinner animation="border"/></div>}
            <InputField value={data.searchValue} setValue={setSearchValue} placeholder="поиск" loading={data.loading} onSubmit={handleSearch} buttonTitle="Искать"/>
            {!data.transfer.length ? <h1>К сожалению, пока ничего не найдено :(</h1>:
                <Row xs={1} md={4} className="g-4">
                    {data.transfer.map((item, index)=>{
                        return(
                            <Col key={index}>
                                <p> <font size = "10" color="72efe9" face="serif"> {index + 1}. {item.name} ({item.id_team}). </font> </p>
                            </Col>
                        )
                    })}
                </Row>
            }
        </div>
    );
}

export default TransfersPage;

index.js

import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';
import TransfersPage from "./App";
// import {Provider} from "react-redux";
// import {createStore} from "redux";
// import {rootReducer} from './src/reducers'
//
// const store = createStore(rootReducer)

// const root = ReactDOM.createRoot(document.getElementById('root'));
// root.render(
//   <React.StrictMode>
//       {/*<Provider store={store}>*/}
//           <App />
//       {/*</Provider>*/}
//   </React.StrictMode>
// );

const Root = ReactDOM.createRoot(document.getElementById('button_container'));

Root.render(<TransfersPage/>)

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

InputField.js

import {Button} from "react-bootstrap";
import React from "react";
// import './InputField';

const InputField = ({ value, setValue, onSubmit, loading, placeholder, buttonTitle = 'Поиск'}) => {
    return <div className="inputField">
        <input value={value} placeholder={placeholder} onChange={(event => setValue(event.target.value))}
               className="u-border-1 u-border-grey-30 u-input u-text-palette-4-base u-input-1"/>
        <Button className="button1" disabled={loading} onClick={onSubmit}>{buttonTitle}</Button>
    </div>
}

export default InputField

package.json

{
  "name": "my-app",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/jest-dom": "^5.16.5",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "axios": "^1.1.3",
    "react": "^18.2.0",
    "react-bootstrap": "^2.5.0",
    "react-dom": "^18.2.0",
    "react-redux": "^8.0.5",
    "react-router": "^6.4.2",
    "react-router-dom": "^6.4.2",
    "react-scripts": "5.0.1",
    "redux": "^4.2.0",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}